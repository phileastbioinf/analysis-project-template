{"title":"Preprocess","markdown":{"yaml":{"title":"Preprocess","author":"Phil East","format":"html","editor":"visual","date":"14/08/2024","output":{"html_document":{"df_print":"tibble","toc":true,"toc_depth":4,"toc_float":true,"code_folding":"hide"}}},"headingText":"Preprocess","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| include: FALSE\n\nknitr::opts_chunk$set(echo=TRUE,warning=FALSE,message=FALSE)\noptions(cache = TRUE, cache.lazy = FALSE)\n\n```\n\n\nWe read in the spectral flow data and construct SingleCellExperiment objects for each sample. We then assess the individual antibody florecence distributions to determine the best transformation and normalisation.\n\n\n```{r}\n#| label: r_init\n#| results: 'hide'\n#| warning: FALSE\n#| message: FALSE\n\nlibrary( SingleCellExperiment)\nlibrary( Spectre )\nlibrary( flowCore )\nlibrary( tidyverse )\nlibrary( DT )\nlibrary( grid )\nlibrary( patchwork )\nlibrary( flowTrans )\nlibrary( flowViz )\nlibrary( flowVS )\n\njsc <- 'function(settings, json) { $(this).parents(\".datatables\").remove(); }'\n\noptions(bitmapType='cairo')\n\nexp_design_file <- file.path( \"/project/data/sample_info.csv\")\nflow_data_home <- file.path( \"/project/data/24w17_sct050_kpar_ado_spectral_cyto/01_input/FlowJo_preprocessed_files/\")\nscript_home <- file.path( \"/project\", \"analyses\", \"preprocess\" )\n```\n\n```{r}\n#| include: FALSE\n# Init Step to make sure that the dependencies are loaded\nhtmltools::tagList(datatable(mtcars))\n```\n\n## Data In\n\nWe read in the FCS files using `flowCore` and create `SingleCellExperiment` objects for each sample.\n\n```{r}\n#| label: read_fcs\n\npdat <- read.csv( file = exp_design_file ) %>%\n  mutate( sample_id = paste( mouse, sample, sep = \"_\" ) )\n\nflowset_file <- file.path( script_home, \"spectral-flowset.rds\" )\nif( file.exists( flowset_file )) {\n   fs <- readRDS( flowset_file )\n} else {\n  # Find all FCS in the directory\n  fcs_file_paths <- pdat$file %>%\n    file.path( flow_data_home, . ) %>%\n    setNames( pdat$sample_id )\n  fs <- read.flowSet( fcs_file_paths )\n  colnames( fs )[4:39] <- ( fs[[1]]@parameters$desc )[4:39]\n  colnames( fs ) <- sub( \"-\", \"_\", colnames( fs ))\n  sampleNames( fs ) <- pdat$sample_id\n  saveRDS( fs, flowset_file )\n}\n```\n\n## Summary stats\n\nWe first looked at the summary stats for each of the anitbodies across all samples.\n\n\n```{r}\n#| label: summary_stats\n\nsummary_stats <- fs %>%\n  map( summary ) %>%\n  map( t ) %>%\n  map( as.data.frame ) %>%\n  map( round ) %>%\n  map( rownames_to_column, var = \"antibody\" ) %>%\n  map( DT::datatable ) %>%\n  setNames( sampleNames( fs ) )\n```\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_summary_stats\n#| results: asis\n#| echo: false\n\ndatatable(matrix(NA, 2, 2), options = list(\"initComplete\" = JS(jsc)))\n\niwalk( summary_stats, ~ {\n    cat(sprintf(\"\\n### %s\\n\\n\", .y))\n    print( htmltools::tagList( .x ) )\n    cat( ' \\n\\n')\n} )\n```\n\n:::\n\n## PnE values\n\nThese values encode whether the fluorescent values for a given antibody have been encoded and should linearised when read in. `0,0` indicates no transformation. \n\n```{r}\n#| label: pne\n\nkeyword( fs[[1]], paste0( \"$P\", 1:36, \"E\")) %>%\n  as.data.frame( ) %>%\n  t( ) %>%\n  as.data.frame() %>%\n  rownames_to_column( var = \"keyword\" ) %>%\n  mutate( keyword = sub( \"X\\\\.\", \"\", keyword )) %>%\n  DT::datatable()\n```\n\n## Subsample cells\n\nWe sub sample the cells to create more manageable set of cells (5000)\n\n```{r}\n#| label: subsample_cells\n\nsample_size <- 5000\nset.seed( 1000 )\n\nfs_sub <- fsApply(fs, function(ff) {\n  idx <- sample.int(nrow(ff), min(sample_size, nrow(ff)))\n  ff[idx,]\n})\n```\n\n## Transformation\n\nWe use flowTrans and flowViz to apply a dynamic arcsinh transformation\n\n```{r}\n#| label: transform_markers\n\nmarkerstotransform <- colnames( fs_sub[[1]] )[ 4:39 ]\n\n```\n\n### flowTrans\n\nflowTrans gives for following warning for all samples.\n\n\n```{r}\n#| label: flowtrans\n\nfs_sub_trans_file <- file.path( script_home, \"fs_sub_trans.rds\")\nif( file.exists( fs_sub_trans_file) ) {\n  fs_sub_trans <- readRDS( fs_sub_trans_file )\n} else {\n  fs_sub_trans <- fsApply( fs_sub, function( x ){\n    flowTrans( x, \n               \"mclMultivArcSinh\",\n               markerstotransform, \n               n2f=FALSE, \n               parameters.only=FALSE)\n  } )\n  saveRDS( fs_sub_trans, fs_sub_trans_file)\n}\n```\n\n### Distributions\n\n```{r}\n#| label: asinh_fluor_dists\n\nantibody_group <- data.frame( antibody = colnames( fs_sub )[ 4:39 ],\n                              group = 1:6 )\n\nasinh_density_plot_file <- file.path( script_home, \"fluorescence_density_plots_asinh.rds\" )\nif( file.exists( asinh_density_plot_file ) ) {\n  asinh_density_plots <- readRDS( asinh_density_plot_file )\n} else {\n  asinh_density_plots <- fs_sub_trans %>% \n    map( function( ff ) {\n      ff$result@exprs[, 4:39 ] %>%\n        as.data.frame( ) %>%\n        gather( antibody, intensity ) %>%\n        left_join( antibody_group, by = \"antibody\" ) %>%\n        group_split( group ) %>%\n        map( function( df ) {\n          ggplot( df, aes( x = intensity, fill = antibody, colour = antibody )) +\n          geom_density( alpha = 0.2 ) +\n          labs( x = \"asinh fluorescence intensity\")\n        } )\n    } )\n  saveRDS( asinh_density_plots, asinh_density_plot_file )\n}\n```\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_asinh_fluor_dist_plots\n#| fig-width: 12\n#| fig-height: 18\n#| fig-cap: fluorescence density plots\n#| results: asis\n#| echo: false\n\niwalk( asinh_density_plots, function( ggl, label ) { \n  gg <- ggl |> wrap_plots( ncol = 1, heights = unit( 5, \"cm\" ))\n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::\n\n### flowVS\n\nWe used flowVS to calculate per-antibody arcsinh cofactors and transformed the data.\n\n```{r}\n#| label: flowvs\n\nfs_sub_flowvs_file <- file.path( script_home, \"fs_sub_flowvs.rds\")\nfs_sub_cofactors_file <- file.path( script_home, \"fs_sub_cofactors.csv\")\nif( file.exists( fs_sub_flowvs_file) ) {\n  fs_sub_flowvs <- readRDS( fs_sub_flowvs_file )\n  cofactor_df <- read.csv( fs_sub_cofactors_file )\n} else {\n  cofactors <- estParamFlowVS( fs_sub, channels = markerstotransform )\n  cofactors_df <- data.frame( markerstotransform, cofactors )\n  write.csv( cofactors_df, file = fs_sub_cofactors_file )\n  fs_sub_flowvs <- transFlowVS( fs_sub, channels = markerstotransform, cofactors )\n  saveRDS( fs_sub_flowvs, fs_sub_flowvs_file)\n}\ncofactor_df %>%\n  DT::datatable()\n```\n\n### Distributions\n\n```{r}\n#| label: asinh_flowvs_dists\n\nantibody_group <- data.frame( antibody = colnames( fs_sub )[ 4:39 ],\n                              group = 1:6 )\n\nasinh_flowvs_density_plot_file <- file.path( script_home, \"fluorescence_density_plots_asinh_flowvs.rds\" )\nif( file.exists( asinh_flowvs_density_plot_file ) ) {\n  asinh_flowvs_density_plots <- readRDS( asinh_flowvs_density_plot_file )\n} else {\n  asinh_flowvs_density_plots <- fs_sub_flowvs %>% \n    map( function( ff ) {\n      ff@exprs[, 4:39 ] %>%\n        as.data.frame( ) %>%\n        gather( antibody, intensity ) %>%\n        left_join( antibody_group, by = \"antibody\" ) %>%\n        group_split( group ) %>%\n        map( function( df ) {\n          ggplot( df, aes( x = intensity, fill = antibody, colour = antibody )) +\n          geom_density( alpha = 0.2 ) +\n          labs( x = \"asinh fluorescence intensity\")\n        } )\n    } )\n  saveRDS( asinh_flowvs_density_plots, asinh_flowvs_density_plot_file )\n}\n```\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_asinh_flowvs_fluor_dist_plots\n#| fig-width: 12\n#| fig-height: 18\n#| fig-cap: fluorescence density plots\n#| results: asis\n#| echo: false\n\niwalk( asinh_flowvs_density_plots, function( ggl, label ) { \n  gg <- ggl |> wrap_plots( ncol = 1, heights = unit( 5, \"cm\" ))\n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::\n\n### flowVis distributions \n\nWe plotted the flowVS arcsinh transformed antibody distributions across all samples using flowViz. The antibodies are grouped in groups of six as in the plots above.\n\n```{r}\n#| label: flowviz\n#| eval: false\n\nmap( unique( antibody_group$group ), function( i ) ) {\n  abs <- antibody_group %>%\n    filter( group == i ) %>%\n    pull( antibody)\n  plot_form <- as.formula( paste0( \"~\", paste( abs, collapse = \"+\", sep = \"\" )))\n  densityplot(~, ITN.VS, main=\"Transfromed CD3 and CD4 channels in ITN data\")\n}\n```\n\n\n## Background metrics\n\nWe plotted the distributions of FSC.A, SSC.A and FJComp.AF.A.\n\n```{r}\n#| label: bg_metrics\n\nbg_density_plot_file <- file.path( script_home, \"bg_density_plots.rds\" )\nif( file.exists( bg_density_plot_file ) ) {\n  bg_density_plots <- readRDS( bg_density_plot_file )\n} else {\n  bg_density_plots <- fs_sub %>% \n    map( function( ff ) {\n      ff@exprs[, 1:3 ] %>%\n        as.data.frame( ) %>%\n        gather( bg_metric, intensity ) %>%\n        ggplot( aes( x = intensity, fill = bg_metric, colour = bg_metric )) +\n        geom_density( alpha = 0.2 ) +\n        labs( x = \"bg intensity\") +\n        scale_x_log10()\n    } )\n  saveRDS( bg_density_plots, bg_density_plot_file )\n}\n```\n\n### Distributions\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_bg_dist_plots\n#| fig-width: 12\n#| fig-cap: backgrond density plots\n#| results: asis\n#| echo: false\n\niwalk( bg_density_plots, function( gg, label ) { \n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::\n\n## Raw fluoresence distributions\n\n```{r}\n#| label: raw_fluor_dists\n\nraw_density_plot_file <- file.path( script_home, \"raw_fluorescence_density_plots.rds\" )\nif( file.exists( raw_density_plot_file ) ) {\n  raw_density_plots <- readRDS( raw_density_plot_file )\n} else {\n  raw_density_plots <- fs_sub %>% \n    map( function( ff ) {\n      ff@exprs[, 4:39 ] %>%\n        as.data.frame( ) %>%\n        gather( antibody, intensity ) %>%\n        left_join( antibody_group, by = \"antibody\" ) %>%\n        group_split( group ) %>%\n        map( function( df ) {\n          ggplot( df, aes( x = intensity, fill = antibody, colour = antibody )) +\n          geom_density( alpha = 0.2 ) +\n          labs( x = \"fluorescence intensity\") +\n          xlim( -5000, 10000 )\n        } )\n    } ) %>%\n    setNames( sampleNames( fs_sub ) )\n  saveRDS( raw_density_plots, raw_density_plot_file )\n}\n```\n\n### Distributions\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_raw_fluor_dist_plots\n#| fig-width: 12\n#| fig-height: 18\n#| fig-cap: raw fluorescence density plots\n#| results: asis\n#| echo: false\n\niwalk( raw_density_plots, function( ggl, label ) { \n  gg <- ggl |> wrap_plots( ncol = 1, heights = unit( 5, \"cm\" ))\n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| include: FALSE\n\nknitr::opts_chunk$set(echo=TRUE,warning=FALSE,message=FALSE)\noptions(cache = TRUE, cache.lazy = FALSE)\n\n```\n\n# Preprocess\n\nWe read in the spectral flow data and construct SingleCellExperiment objects for each sample. We then assess the individual antibody florecence distributions to determine the best transformation and normalisation.\n\n\n```{r}\n#| label: r_init\n#| results: 'hide'\n#| warning: FALSE\n#| message: FALSE\n\nlibrary( SingleCellExperiment)\nlibrary( Spectre )\nlibrary( flowCore )\nlibrary( tidyverse )\nlibrary( DT )\nlibrary( grid )\nlibrary( patchwork )\nlibrary( flowTrans )\nlibrary( flowViz )\nlibrary( flowVS )\n\njsc <- 'function(settings, json) { $(this).parents(\".datatables\").remove(); }'\n\noptions(bitmapType='cairo')\n\nexp_design_file <- file.path( \"/project/data/sample_info.csv\")\nflow_data_home <- file.path( \"/project/data/24w17_sct050_kpar_ado_spectral_cyto/01_input/FlowJo_preprocessed_files/\")\nscript_home <- file.path( \"/project\", \"analyses\", \"preprocess\" )\n```\n\n```{r}\n#| include: FALSE\n# Init Step to make sure that the dependencies are loaded\nhtmltools::tagList(datatable(mtcars))\n```\n\n## Data In\n\nWe read in the FCS files using `flowCore` and create `SingleCellExperiment` objects for each sample.\n\n```{r}\n#| label: read_fcs\n\npdat <- read.csv( file = exp_design_file ) %>%\n  mutate( sample_id = paste( mouse, sample, sep = \"_\" ) )\n\nflowset_file <- file.path( script_home, \"spectral-flowset.rds\" )\nif( file.exists( flowset_file )) {\n   fs <- readRDS( flowset_file )\n} else {\n  # Find all FCS in the directory\n  fcs_file_paths <- pdat$file %>%\n    file.path( flow_data_home, . ) %>%\n    setNames( pdat$sample_id )\n  fs <- read.flowSet( fcs_file_paths )\n  colnames( fs )[4:39] <- ( fs[[1]]@parameters$desc )[4:39]\n  colnames( fs ) <- sub( \"-\", \"_\", colnames( fs ))\n  sampleNames( fs ) <- pdat$sample_id\n  saveRDS( fs, flowset_file )\n}\n```\n\n## Summary stats\n\nWe first looked at the summary stats for each of the anitbodies across all samples.\n\n\n```{r}\n#| label: summary_stats\n\nsummary_stats <- fs %>%\n  map( summary ) %>%\n  map( t ) %>%\n  map( as.data.frame ) %>%\n  map( round ) %>%\n  map( rownames_to_column, var = \"antibody\" ) %>%\n  map( DT::datatable ) %>%\n  setNames( sampleNames( fs ) )\n```\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_summary_stats\n#| results: asis\n#| echo: false\n\ndatatable(matrix(NA, 2, 2), options = list(\"initComplete\" = JS(jsc)))\n\niwalk( summary_stats, ~ {\n    cat(sprintf(\"\\n### %s\\n\\n\", .y))\n    print( htmltools::tagList( .x ) )\n    cat( ' \\n\\n')\n} )\n```\n\n:::\n\n## PnE values\n\nThese values encode whether the fluorescent values for a given antibody have been encoded and should linearised when read in. `0,0` indicates no transformation. \n\n```{r}\n#| label: pne\n\nkeyword( fs[[1]], paste0( \"$P\", 1:36, \"E\")) %>%\n  as.data.frame( ) %>%\n  t( ) %>%\n  as.data.frame() %>%\n  rownames_to_column( var = \"keyword\" ) %>%\n  mutate( keyword = sub( \"X\\\\.\", \"\", keyword )) %>%\n  DT::datatable()\n```\n\n## Subsample cells\n\nWe sub sample the cells to create more manageable set of cells (5000)\n\n```{r}\n#| label: subsample_cells\n\nsample_size <- 5000\nset.seed( 1000 )\n\nfs_sub <- fsApply(fs, function(ff) {\n  idx <- sample.int(nrow(ff), min(sample_size, nrow(ff)))\n  ff[idx,]\n})\n```\n\n## Transformation\n\nWe use flowTrans and flowViz to apply a dynamic arcsinh transformation\n\n```{r}\n#| label: transform_markers\n\nmarkerstotransform <- colnames( fs_sub[[1]] )[ 4:39 ]\n\n```\n\n### flowTrans\n\nflowTrans gives for following warning for all samples.\n\n\n```{r}\n#| label: flowtrans\n\nfs_sub_trans_file <- file.path( script_home, \"fs_sub_trans.rds\")\nif( file.exists( fs_sub_trans_file) ) {\n  fs_sub_trans <- readRDS( fs_sub_trans_file )\n} else {\n  fs_sub_trans <- fsApply( fs_sub, function( x ){\n    flowTrans( x, \n               \"mclMultivArcSinh\",\n               markerstotransform, \n               n2f=FALSE, \n               parameters.only=FALSE)\n  } )\n  saveRDS( fs_sub_trans, fs_sub_trans_file)\n}\n```\n\n### Distributions\n\n```{r}\n#| label: asinh_fluor_dists\n\nantibody_group <- data.frame( antibody = colnames( fs_sub )[ 4:39 ],\n                              group = 1:6 )\n\nasinh_density_plot_file <- file.path( script_home, \"fluorescence_density_plots_asinh.rds\" )\nif( file.exists( asinh_density_plot_file ) ) {\n  asinh_density_plots <- readRDS( asinh_density_plot_file )\n} else {\n  asinh_density_plots <- fs_sub_trans %>% \n    map( function( ff ) {\n      ff$result@exprs[, 4:39 ] %>%\n        as.data.frame( ) %>%\n        gather( antibody, intensity ) %>%\n        left_join( antibody_group, by = \"antibody\" ) %>%\n        group_split( group ) %>%\n        map( function( df ) {\n          ggplot( df, aes( x = intensity, fill = antibody, colour = antibody )) +\n          geom_density( alpha = 0.2 ) +\n          labs( x = \"asinh fluorescence intensity\")\n        } )\n    } )\n  saveRDS( asinh_density_plots, asinh_density_plot_file )\n}\n```\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_asinh_fluor_dist_plots\n#| fig-width: 12\n#| fig-height: 18\n#| fig-cap: fluorescence density plots\n#| results: asis\n#| echo: false\n\niwalk( asinh_density_plots, function( ggl, label ) { \n  gg <- ggl |> wrap_plots( ncol = 1, heights = unit( 5, \"cm\" ))\n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::\n\n### flowVS\n\nWe used flowVS to calculate per-antibody arcsinh cofactors and transformed the data.\n\n```{r}\n#| label: flowvs\n\nfs_sub_flowvs_file <- file.path( script_home, \"fs_sub_flowvs.rds\")\nfs_sub_cofactors_file <- file.path( script_home, \"fs_sub_cofactors.csv\")\nif( file.exists( fs_sub_flowvs_file) ) {\n  fs_sub_flowvs <- readRDS( fs_sub_flowvs_file )\n  cofactor_df <- read.csv( fs_sub_cofactors_file )\n} else {\n  cofactors <- estParamFlowVS( fs_sub, channels = markerstotransform )\n  cofactors_df <- data.frame( markerstotransform, cofactors )\n  write.csv( cofactors_df, file = fs_sub_cofactors_file )\n  fs_sub_flowvs <- transFlowVS( fs_sub, channels = markerstotransform, cofactors )\n  saveRDS( fs_sub_flowvs, fs_sub_flowvs_file)\n}\ncofactor_df %>%\n  DT::datatable()\n```\n\n### Distributions\n\n```{r}\n#| label: asinh_flowvs_dists\n\nantibody_group <- data.frame( antibody = colnames( fs_sub )[ 4:39 ],\n                              group = 1:6 )\n\nasinh_flowvs_density_plot_file <- file.path( script_home, \"fluorescence_density_plots_asinh_flowvs.rds\" )\nif( file.exists( asinh_flowvs_density_plot_file ) ) {\n  asinh_flowvs_density_plots <- readRDS( asinh_flowvs_density_plot_file )\n} else {\n  asinh_flowvs_density_plots <- fs_sub_flowvs %>% \n    map( function( ff ) {\n      ff@exprs[, 4:39 ] %>%\n        as.data.frame( ) %>%\n        gather( antibody, intensity ) %>%\n        left_join( antibody_group, by = \"antibody\" ) %>%\n        group_split( group ) %>%\n        map( function( df ) {\n          ggplot( df, aes( x = intensity, fill = antibody, colour = antibody )) +\n          geom_density( alpha = 0.2 ) +\n          labs( x = \"asinh fluorescence intensity\")\n        } )\n    } )\n  saveRDS( asinh_flowvs_density_plots, asinh_flowvs_density_plot_file )\n}\n```\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_asinh_flowvs_fluor_dist_plots\n#| fig-width: 12\n#| fig-height: 18\n#| fig-cap: fluorescence density plots\n#| results: asis\n#| echo: false\n\niwalk( asinh_flowvs_density_plots, function( ggl, label ) { \n  gg <- ggl |> wrap_plots( ncol = 1, heights = unit( 5, \"cm\" ))\n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::\n\n### flowVis distributions \n\nWe plotted the flowVS arcsinh transformed antibody distributions across all samples using flowViz. The antibodies are grouped in groups of six as in the plots above.\n\n```{r}\n#| label: flowviz\n#| eval: false\n\nmap( unique( antibody_group$group ), function( i ) ) {\n  abs <- antibody_group %>%\n    filter( group == i ) %>%\n    pull( antibody)\n  plot_form <- as.formula( paste0( \"~\", paste( abs, collapse = \"+\", sep = \"\" )))\n  densityplot(~, ITN.VS, main=\"Transfromed CD3 and CD4 channels in ITN data\")\n}\n```\n\n\n## Background metrics\n\nWe plotted the distributions of FSC.A, SSC.A and FJComp.AF.A.\n\n```{r}\n#| label: bg_metrics\n\nbg_density_plot_file <- file.path( script_home, \"bg_density_plots.rds\" )\nif( file.exists( bg_density_plot_file ) ) {\n  bg_density_plots <- readRDS( bg_density_plot_file )\n} else {\n  bg_density_plots <- fs_sub %>% \n    map( function( ff ) {\n      ff@exprs[, 1:3 ] %>%\n        as.data.frame( ) %>%\n        gather( bg_metric, intensity ) %>%\n        ggplot( aes( x = intensity, fill = bg_metric, colour = bg_metric )) +\n        geom_density( alpha = 0.2 ) +\n        labs( x = \"bg intensity\") +\n        scale_x_log10()\n    } )\n  saveRDS( bg_density_plots, bg_density_plot_file )\n}\n```\n\n### Distributions\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_bg_dist_plots\n#| fig-width: 12\n#| fig-cap: backgrond density plots\n#| results: asis\n#| echo: false\n\niwalk( bg_density_plots, function( gg, label ) { \n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::\n\n## Raw fluoresence distributions\n\n```{r}\n#| label: raw_fluor_dists\n\nraw_density_plot_file <- file.path( script_home, \"raw_fluorescence_density_plots.rds\" )\nif( file.exists( raw_density_plot_file ) ) {\n  raw_density_plots <- readRDS( raw_density_plot_file )\n} else {\n  raw_density_plots <- fs_sub %>% \n    map( function( ff ) {\n      ff@exprs[, 4:39 ] %>%\n        as.data.frame( ) %>%\n        gather( antibody, intensity ) %>%\n        left_join( antibody_group, by = \"antibody\" ) %>%\n        group_split( group ) %>%\n        map( function( df ) {\n          ggplot( df, aes( x = intensity, fill = antibody, colour = antibody )) +\n          geom_density( alpha = 0.2 ) +\n          labs( x = \"fluorescence intensity\") +\n          xlim( -5000, 10000 )\n        } )\n    } ) %>%\n    setNames( sampleNames( fs_sub ) )\n  saveRDS( raw_density_plots, raw_density_plot_file )\n}\n```\n\n### Distributions\n\n:::{.panel-tabset}\n\n```{r}\n#| label: render_raw_fluor_dist_plots\n#| fig-width: 12\n#| fig-height: 18\n#| fig-cap: raw fluorescence density plots\n#| results: asis\n#| echo: false\n\niwalk( raw_density_plots, function( ggl, label ) { \n  gg <- ggl |> wrap_plots( ncol = 1, heights = unit( 5, \"cm\" ))\n  cat('#### ', label, '\\n\\n')\n  grid.newpage()\n  grid.draw( gg )\n  cat( \" \\n\\n\" )\n})\n```\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":{"html_document":{"df_print":"tibble","toc":true,"toc_depth":4,"toc_float":true,"code_folding":"hide"}},"warning":true,"include":true,"keep-md":true,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"none"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"link-external-filter":"bioinformatics.crick.ac.uk|bioinformatics.thecrick.org|github.com/BABS-STP"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"arrow","reference-location":"document","toc":true,"toc-depth":3,"citeproc":true,"output-file":"preprocess.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","search-replace":{"+nfcore":"[nf-core](https://nf-co.re)"},"code-annotations":"hover","code-block-bg":true,"code-block-border-left":false,"code-copy":"hover","fontsize":"1rem","linestretch":1.75,"mainfont":"Trebuchet MS","monofont":"Menlo","footnotes-hover":false,"anchor-sections":true,"minimal":false,"smooth-scroll":true,"theme":["flatly"],"appendix-style":"default","cap-location":"margin","fig-cap-location":"margin","tbl-cap-location":"margin","title-block-banner":true,"toc-expand":1,"toc-location":"left","toc-title":"Contents","citation-location":"document","citations-hover":true,"title":"Preprocess","author":"Phil East","editor":"visual","date":"14/08/2024"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}